--- a/setup_libuv.py	2016-10-31 00:18:04.425557900 +0900
+++ b/setup_libuv.py	2016-10-31 00:26:45.966033000 +0900
@@ -119,6 +119,11 @@
                              'variable "PYTHON" to point to a custom '
                              'installation location.')
 
+def is_msys2():
+    from os.path import basename, dirname
+    import sys; print(sys.executable)
+    return basename(dirname(dirname(sys.executable))) in ('mingw32', 'mingw64', 'usr')
+
 
 class libuv_build_ext(build_ext):
     libuv_dir      = os.path.join('deps', 'libuv')
@@ -147,11 +152,11 @@
     def build_extensions(self):
         self.force = self.force or self.libuv_force_fetch or self.libuv_clean_compile
         if self.use_system_libuv:
-            if sys.platform == 'win32':
+            if sys.platform == 'win32' and not is_msys2():
                 raise DistutilsError('using a system provided libuv is unsupported on Windows')
             self.compiler.add_library('uv')
         else:
-            if sys.platform == 'win32':
+            if sys.platform == 'win32' and not is_msys2():
                 self.libuv_lib = os.path.join(self.libuv_dir, 'Release', 'lib', 'libuv.lib')
             else:
                 self.libuv_lib = os.path.join(self.libuv_dir, '.libs', 'libuv.a')
@@ -162,8 +167,9 @@
         if sys.platform.startswith('linux'):
             self.compiler.add_library('rt')
         elif sys.platform == 'win32':
+            if not is_msys2():
+                self.extensions[0].extra_link_args.extend(['/NODEFAULTLIB:libcmt', '/LTCG'])
             self.extensions[0].define_macros.append(('WIN32', 1))
-            self.extensions[0].extra_link_args.extend(['/NODEFAULTLIB:libcmt', '/LTCG'])
             self.compiler.add_library('advapi32')
             self.compiler.add_library('iphlpapi')
             self.compiler.add_library('psapi')
@@ -192,7 +198,7 @@
             env = os.environ.copy()
             env['CFLAGS'] = ' '.join(x for x in (cflags, env.get('CFLAGS', None), env.get('ARCHFLAGS', None)) if x)
             log.info('Building libuv...')
-            if sys.platform == 'win32':
+            if sys.platform == 'win32' and not is_msys2():
                 prepare_windows_env(env)
                 libuv_arch = {'32bit': 'x86', '64bit': 'x64'}[platform.architecture()[0]]
                 exec_process(['cmd.exe', '/C', 'vcbuild.bat', libuv_arch, 'release'], cwd=self.libuv_dir, env=env, shell=True, silent=not self.libuv_verbose_build)
@@ -212,7 +218,7 @@
             build_libuv()
         else:
             if self.libuv_clean_compile:
-                if sys.platform == 'win32':
+                if sys.platform == 'win32' and not is_msys2():
                     env = os.environ.copy()
                     prepare_windows_env(env)
                     exec_process(['cmd.exe', '/C', 'vcbuild.bat', 'clean'], cwd=self.libuv_dir, env=env, shell=True)
